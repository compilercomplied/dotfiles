" \ ************** \
" \ Plugin Manager \
" \ ************** \

" Auto install Plug if not installed. Runs PlugInstall afterwards.
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
" Make sure you use single quotes

" ### General purpose ###
Plug 'junegunn/vim-easy-align'          " Aligning
Plug 'vim-airline/vim-airline'          " Status bar
Plug 'tpope/vim-fugitive'               " Git wrapper
"Plug 'scrooloose/syntastic'             " Syntax checking
Plug 'tpope/vim-sensible'               " Sane defaults
Plug 'xolox/vim-easytags'               " Gen ctags
Plug 'xolox/vim-misc'                   " Dependency
Plug 'majutsushi/tagbar'                " Browse ctags
Plug 'junegunn/fzf.vim'                 " Fuzzy find

" ### Python ###
Plug 'davidhalter/jedi-vim'             " Code completion
Plug 'tmhedberg/SimpylFold'             " Folding
"Plug 'vim-scripts/indentpython.vim'     " PEP8 indents
Plug 'jmcantrell/vim-virtualenv'        " Virtual envs

" ### Web ###
Plug 'mattn/emmet-vim'                  " https://emmet.io like
"Plug 'elzr/vim-json'                    " Better JSON

" ### Themes ###
Plug 'vim-airline/vim-airline-themes'
Plug 'morhetz/gruvbox'
Plug 'altercation/vim-colors-solarized'

" Initialize plugin system
call plug#end()


" \ ********************* \
" \ General functionality \
" \ ********************* \

" Vim needs a POSIX-Compliant shell. Fish is not.
if $SHELL =~ 'bin/fish' || $SHELL =~ 'bin/zsh'
    set shell=/usr/bin/bash
endif


filetype plugin indent on
set guifont=DejaVu\ Sans\ Mono:h20

set encoding=utf-8              " keep the encoding as high as possible in $MYVIMRC
set modeline                    " modeline
set tabstop=4                   " show existing tab with 4 spaces width
set softtabstop=4               " number of spaces tab counts for while editing 
set shiftwidth=4                " when indenting with '>', use 4 spaces width
set expandtab                   " on pressing tab, insert 4 spaces
set autoindent                  " copy indent from current line
syntax enable                   " syntax highlight
set number                      " show line numbers
let g:pymode_python = 'python3' " python 3 as default
set backspace=indent,eol,start  " backspace behavior in normal mode
"set hlsearch                    " highlight search matches by default
set splitbelow                  " split below
set splitright                  " split to the right
set mouse=a                     " allow mouse
set fileformat=unix             " gives <EOL> of current buffer 
"set textwidth=85                " line's 'max char count
set foldmethod=indent           " indent= lines with equal indent create a fold
set foldlevel=99                " folds with a higher level will be closed
set colorcolumn=95              " color column
set tags=~/code/.tags           " ctags dir

highlight ColorColumn
            \ ctermbg=0
            \ guibg=lightgrey   " adds color column at the end of


" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX files.
function! AppendModeline()
    let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
    \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>



" \ ******** \
" \ Mappings \
" \ ******** \
" GENERAL BINDS
let mapleader = ","
" tmux will send xterm-style keys when its xterm-keys option is on
if &term =~ '^screen'
	execute "set <xUp>=\e[1;*A"
	execute "set <xDown>=\e[1;*B"
	execute "set <xRight>=\e[1;*C"
   execute "set <xLeft>=\e[1;*D"
endif
set t_ku=OA
set t_kd=OB
set t_kr=OC
set t_kl=OD
" source $MYVIMRC reloads the saved $MYVIMRC
:nmap <Leader>s :source $MYVIMRC
" opens $MYVIMRC for editing
:nmap <Leader>v :tabedit $MYVIMRC
" shift+tab for inverse tab
nnoremap <S-Tab> <<
inoremap <S-Tab> <C-d>

" ALL MODES
" Accessibility
noremap :W :w
" maps F3 to tagbar
nmap <F3> :TagbarToggle<CR>

" INSERT MODE
" Bracket and parenthesis handling
" automatically adds closing brackets
"inoremap ( ()<Esc>i
"inoremap [ []<Esc>i
"inoremap { {}<Esc>i
"inoremap " ""<Esc>i
"inoremap ' ''<Esc>i
" jk combination to enter normal mode
inoremap jk <esc>
inoremap kj <esc>

" VISUAL MODE
" _( map to close within brackets/quotes selected text
vnoremap _[ <Esc>`>a]<Esc>`<i[<Esc>
vnoremap _{ <Esc>`>a}<Esc>`<i{<Esc>
vnoremap _( <Esc>`>a)<Esc>`<i(<Esc>
vnoremap _" <Esc>`>a"<Esc>`<i"<Esc>
vnoremap _' <Esc>`>a'<Esc>`<i'<Esc>
" use J K to move around selected block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" PLUGINS
" FZF
imap <c-x><c-o> <plug>(fzf-complete-line)
map <leader>b :Buffers<cr>
map <leader>f :Files<cr>
map <leader>g :GFiles<cr>
map <leader>t :Tags<cr>



" \ ********* \
" \ Functions \
" \ ********* \

" Move window between tabs
function MoveToPrevTab()
  "there is only one window
  if tabpagenr('$') == 1 && winnr('$') == 1
    return
  endif
  "preparing new window
  let l:tab_nr = tabpagenr('$')
  let l:cur_buf = bufnr('%')
  if tabpagenr() != 1
    close!
    if l:tab_nr == tabpagenr('$')
      tabprev
    endif
    sp
  else
    close!
    exe "0tabnew"
  endif
  "opening current buffer in new window
  exe "b".l:cur_buf
endfunc

function MoveToNextTab()
  "there is only one window
  if tabpagenr('$') == 1 && winnr('$') == 1
    return
  endif
  "preparing new window
  let l:tab_nr = tabpagenr('$')
  let l:cur_buf = bufnr('%')
  if tabpagenr() < tab_nr
    close!
    if l:tab_nr == tabpagenr('$')
      tabnext
    endif
    sp
  else
    close!
    tabnew
  endif
  "opening current buffer in new window
  exe "b".l:cur_buf
endfunc
nmap <leader>L :call MoveToNextTab()<CR>
nmap <leader>H :call MoveToPrevTab()<CR>

" Map F2 to netrw in vertical split
function! ToggleVExplorer()
  if exists("t:expl_buf_num")
      let expl_win_num = bufwinnr(t:expl_buf_num)
      if expl_win_num != -1
          let cur_win_nr = winnr()
          exec expl_win_num . 'wincmd w'
          close
          exec cur_win_nr . 'wincmd w'
          unlet t:expl_buf_num
      else
          unlet t:expl_buf_num
      endif
  else
      exec '1wincmd w'
      Vexplore
      set number
      let t:expl_buf_num = bufnr("%")
  endif
endfunction
nmap <F2> :call ToggleVExplorer()<cr>




" \ ************* \
" \ Plugin Config \
" \ ************* \

"Jedi-vim
"let g:jedi#auto_initialization = 0          " lazy loading


" \ ****************** \
" \ Appearance-related \
" \ ****************** \

set t_Co=256
set laststatus=2
colorscheme solarized 
set background=light
let g:airline_powerline_fonts = 1



" \ ******* \
" \ Sources \
" \ ******* \

autocmd BufNewFile,BufRead *.py     source ~/.vim/sources/py.vim
autocmd BufNewFile,BufRead *.cpp    source ~/.vim/sources/cpp.vim
autocmd BufNewFile,BufRead *.c      source ~/.vim/sources/c.vim
autocmd BufNewFile,BufRead *.tex    source ~/.vim/sources/tex.vim



"  ********* \
" \ Templates \
" \ ********* \

"au BufNewFile *.py r ~/.vim/templates/temp.py
"au BufNewFile *.sh r ~/.vim/templates/temp.sh
au BufNewFile *.tex r ~/.vim/templates/temp.tex
